// Code generated by sqlc. DO NOT EDIT.
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  code, name, price
) VALUES (
  $1, $2, $3
)
RETURNING id, code, name, price, created_at
`

type CreateProductParams struct {
	Code  string `json:"code"`
	Name  string `json:"name"`
	Price int64  `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.Code, arg.Name, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, code, name, price, created_at FROM products
WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getProductByCode = `-- name: GetProductByCode :one
SELECT id, code, name, price, created_at FROM products
WHERE code = $1
`

func (q *Queries) GetProductByCode(ctx context.Context, code string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByCode, code)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const listProduct = `-- name: ListProduct :many
SELECT id, code, name, price, created_at FROM products AS P
WHERE P.code = $1 OR LOWER(P.name) LIKE '%' || $2 || '%'
ORDER BY P.id DESC
OFFSET $3
LIMIT $4
`

type ListProductParams struct {
	Code    string         `json:"code"`
	Column2 sql.NullString `json:"column_2"`
	Offset  int32          `json:"offset"`
	Limit   int32          `json:"limit"`
}

func (q *Queries) ListProduct(ctx context.Context, arg ListProductParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProduct,
		arg.Code,
		arg.Column2,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products SET
code = $1,
name = $2,
price = $3
WHERE id = $4
RETURNING id, code, name, price, created_at
`

type UpdateProductParams struct {
	Code  string `json:"code"`
	Name  string `json:"name"`
	Price int64  `json:"price"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Code,
		arg.Name,
		arg.Price,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}
